#!/usr/bin/python3

"""Usage:
    MakeLIn [options] <configfile>

Options:
    -h, --help
        Show this screen and exit
    --version
        Show version number and exit
    -t <title>, --title <title>
        Description line to go on top of data file
        [default: DPD Polymer Simulation Config Data]
    -o <outfile>, --outfile <outfile>
        File to write to [default: Polymer.in]

Arguments:
    <configfile>
        JSON file that contains:
            "templist"
            "dpdstrength"
            "dpdgamma"
            "dpdcutoff"
            "bondstrength"
            "bondlength"
            "anglestrength"
            "angleangle"
            "dihedrala"
            "dihedralb"
            "dihedralc"
            "sbbond"
            "sbangle"
            "sbdihedral"
"""
VERSION='Beta Version\nAuthor: Alberto Nava'

################################################################
# Importations
################################################################

from docopt import docopt
import os
import pandas as pd
import numpy as np
import json
from timeit import default_timer as timer
from time import strftime, gmtime

################################################################
# Template
################################################################

inTemplate="""#{TITLE}

#====================================================================#
# Set units and temperature
#====================================================================#

label           looptemp
variable        Temp universe {TEMPLIST}
units           real
log             ${{Temp}}_dpdpolymer.log

#====================================================================#
# Set up System
#====================================================================#

atom_style      molecular
read_data       Polymer.dat
group           chain molecule 1

pair_style      dpd/fdt ${{Temp}} {DPDCUTOFF} 97
pair_coeff      * * {DPDSTRENGTH} {DPDGAMMA}

bond_style      harmonic
bond_coeff      * {BONDSTRENGTH} {BONDLENGTH}

angle_style     harmonic
angle_coeff     * {ANGLESTRENGTH} {ANGLEANGLE}

dihedral_style  helix
dihedral_coeff  * {DIHEDRALA} {DIHEDRALB} {DIHEDRALC}

improper_style  none

special_bonds   lj {SBBOND} {SBANGLE} {SBDIHEDRAL}

#====================================================================#
# Set up relaxation parameters
#====================================================================#

timestep 0.01
run_style       verlet
comm_modify     vel yes
comm_modify     cutoff 30.0
fix             1 all shardlow
fix             2 all nve

#====================================================================#
# Relax initial configuration
#====================================================================#

min_style       sd
min_modify      dmax 0.1
thermo          10
thermo_style    custom step fmax fnorm
dump            min chain atom 10 ${Temp}_dpdpolymer_minimize.lammpstrj
minimize        1.0e-5 1.0e-8 2000 10000
undump          min

#====================================================================#
# Set up execution parameters
#====================================================================#

neigh_modify    every 2
timestep        0.5
velocity        all create ${{Temp}} 95

#====================================================================#
# Post-relaxation equilibration steps
#====================================================================#

run             20000

#====================================================================#
# Output Stats
#====================================================================#

compute         correlation all vacf
compute         rog chain gyration

thermo          100
thermo_style    custom step temp pe ke etotal c_correlation[4] c_rog

dump            runtime chain atom 100 ${{Temp}}_dpdpolymer.lammpstrj

dump            TCR chain xyz 100 ${{Temp}}_dpdpolymer.coord
dump_modify     TCR sort id

#====================================================================#
# Execute
#====================================================================#

run             100000

#====================================================================#
# Multi-partition execution loop
#====================================================================#

clear
next Temp
jump Polymer.in looptemp
"""

################################################################
# Utilities
################################################################

def readConfig(Args):
    """	Arguments:
            Args : dict; CLI arguments given to docopt
        Returns:
            jsonData : dict; dictionary containing input params
    """
    if not os.path.exists(Args['<configfile>']):
        raise SystemExit('Configuration File does not exist: {}'.format(Args['<configfile>']))
    with open(Args['<configfile>'], 'r') as jsonFile:
        jsonData = json.load(jsonFile)
    return jsonData

def fillOutTemplate(configData, Args):
    """	Arguments:
            Args : dict; CLI arguments given to docopt
        Returns:
            goodData : str; filled out template
        Fills out template and returns it
    """
    Context = {
            "TITLE": Args['--title'],
            "TEMPLIST": ' '.join(str(val) for val in configData['templist']),
            "DPDSTRENGTH": str(configData['dpdstrength']),
            "DPDGAMMA": str(configData['dpdgamma']),
            "DPDCUTOFF": str(configData['dpdcutoff']),
            "BONDSTRENGTH": str(configData['bondstrength']),
            "BONDLENGTH": str(configData['bondlength']),
            "ANGLESTRENGTH": str(configData['anglestrength']),
            "ANGLEANGLE": str(configData['angleangle']),
            "DIHEDRALA": str(configData['dihedrala']),
            "DIHEDRALB": str(configData['dihedralb']),
            "DIHEDRALC": str(configData['dihedralc']),
            "SBBOND": str(configData['sbbond']),
            "SBANGLE": str(configData['sbangle']),
            "SBDIHEDRAL": str(configData['sbdihedral']),
            }
    goodData = inTemplate.format(**Context)
    return goodData

def saveDataFile(Data, Args):
    """	Arguments:
            Data : str; contains data file to write
            Args : dict; CLI arguments given to docopt
        Returns:
            None
        Writes finished data file to a file
    """
    with open(Args['--outfile'], 'w') as F:
        F.write(Data)

################################################################
# Main
################################################################

def main(Args):
    """	Arguments:
            Args : dict; CLI arguments given to docopt
        Returns:
            None
    """
    beginTime = timer()
    ############################################################
    configParams = readConfig(Args)
    completeData = fillOutTemplate(configParams, Args)
    saveDataFile(completeData, Args)
    ############################################################
    endTime = timer()
    print('Create Lammps Input File Total time elapsed: {}'.format(
        str(strftime('%H:%M:%S', gmtime(endTime - beginTime)))))

################################################################
if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    main(arguments)
