#!/usr/bin/python3

"""Usage:
    CalcRog [options] <data>

Options:
    -h, --help
        Show this screen and exit
    --version
        Show version number and exit
    -d <delimiter>, --delimiter <delimiter>
        Delimiter in data file
        [default: ,]
    -c <column>, --column <column>
        Column name for radius of gyration in data file
        [default: rog]

Arguments:
    <data>
        File that contains pure data
"""
VERSION='Beta Version\nAuthor: Alberto Nava'

################################################################
# Importations
################################################################

from docopt import docopt
import os
import pandas as pd
import numpy as np

################################################################
# Utilities
################################################################

def readFile(Args):
    """	Arguments:
            Args : dict; CLI arguments given to docopt
        Returns:
            Data : pd dataframe; dataframe containing data
                   information
        Reads data file and returns a pandas dataframe
    """
    Data = pd.read_csv(Args['<data>'],
                       sep=Args['--delimiter'],
                       header=0)
    return Data

def calculateMean(Data, Args):
    """	Arguments:
            Data : pd dataframe; dataframe containing data info
            Args : dict; CLI arguments given to docopt
        Returns:
            average
    """
    return np.mean(eval("Data.{}.values".format(Args['--column'])))

################################################################
# Main
################################################################

def main(Args):
    """	Arguments:
            Args : dict; CLI arguments given to docopt
        Returns:
            None
    """
    ############################################################
    if not os.path.exists(Args['<data>']):
        raise SystemExit('data file does not exist')
    Temp, Sp = Args['<data>'].strip('.data').split('-')
    thermoData = readFile(Args)
    meanRog = str(calculateMean(thermoData, Args))
    print(','.join([Temp,Sp,meanRog]))
    ############################################################

################################################################
if __name__ == '__main__':
    arguments = docopt(__doc__, version=VERSION)
    main(arguments)
